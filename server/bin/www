#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('challenge-07:server');
var http = require('http');
require('dotenv').config();

const { Server } = require("socket.io");

const { Prisma } = require("@prisma/client");
const USERS = require("../models/users.model");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const socketio = new Server(server, {
  connectionStateRecovery: {}
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


socketio.on('connect', (socket) => {
  console.log(`A user connected: ${socket.id}`);

  socket.on('get-clients', (data) => {
    
    console.log(`Email: ${data.email}, Socket ID: ${socket.id}`); 

    const body = {};

    body.socket_id = socket.id;
    body.email = data.email;
    
    USERS.updateUserByEmail(body);

    socketio.to(socket.id).emit('registration-notification:' + data.email, 
      "Welcome ! You have successfully registered."
    );
  });

  socket.on('password-reset', (data) => {
    
    console.log(`Email: ${data.email}, Socket ID: ${socket.id}`); 

    const body = {};

    body.socket_id = socket.id;
    body.email = data.email;
    
    USERS.updateUserByEmail(body);

    socketio.to(socket.id).emit('reset-password-notification:' + data.email, 
      "You have successfully reset your password."
    );
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
